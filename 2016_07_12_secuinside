보안 디자인
날려서 기억에 의존해서 다시씀

많은 사람들이 자동화에 대한 이야기를 하고 있음
하지만 이러한 자동화에 대한 이야기는 외부적인 크래시에 의존할 뿐
프로그램의 디자인적인 면에 대한 부분에 대해서는 이야기 하고 있지 않음

예를 들어 iptime 의 경우를 보자, root shell 을 획득 했다
디자인적인 문제로 보자면, 나는 shell 을 획득하면 업데이트 기능부터 제거하겠다
모든 IoT 장비들은 필연적으로 update 를 해야 한다
iptime 의 경우 update.cgi 를 통해 업데이트를 진행하는데,
update.cgi 를 통해 update 기능이 제거하고 바이러스를 심어논 펌웨어를 올린다 가정하자
이런 iptime 은 구조적 문제에 의해,
소비자 단에서 절대로 iptime 의 바이러스를 제거할 수 없게 된다
iptime 의 초기화 기능은 설정을 초기화하는 역할을 할뿐이다
uart 케이블을 통해 직접 펌웨어를 집어넣는 것이 아니면,
iptime 은 영원히 감염된 상태일 것이다
이러한 취약점은 디자인적인 부분에서 발생하는 것이다.

Machine Learning 을 통해 취약점 분석을 자동화 한다고 하자
ml 머신의 경우 특정 지식이상을 얻게 되면,
사람이 이해하지 못하는 초지능적인 부분에 진입하게 된다
보안의 경우에는 여기에 도달하지 못했다.
ICT 가 그만큼 견고하지 않기 때문이다.
그렇다면 ml 머신을 통해 ICT 의 발전 미래를 예측하여,
취약점 분석의 초지능을 도출, 분석을 자동화하는 미래가 올 것이라 할 수 있지 않을까
하지만 사람은 이 머신이 초지능에 도달했는지 조차 알지 못한다
이러한 문제는 취약점이 무엇인가에 대한 질문으로 회기한다

이는 취약점의 구조적, 디자인적 결함, 취약점의 근본적인 의미에 대한 연구 보다
기술적인 연구에만 집중했기 때문이라 생각한다
앞으로 우리가 할일은 디자인 결함에 대해 연구하는게 우선이 되야 하지 않을까 한다


보안 자동화
역공학은 개개인의 능력에 의존적임 (대규모의 분석에 취약)
버그가 너무 많고 그 중에 보안에 중요한 버그는 몇 안됨

-> 바이너리로부터 취약점 찾기 -> 취약점을 이용한 익스플로잇 생성
(AEG Automatic Exploit Generation)
-> 찾은 취약점의 원인을 파악하기 위한 패치

최초의 AEG ? 2005년 Automatic Discovery of API-Level Exploits
program 과 이 것이 정상적으로 실행되는가 아닌가의 property 를 판별함
-> 정상 작동 ? or not
AEG : 프로그램의 정확도가 아닌 exploitability 를 점검

API-Level Exploits 의 자동화 ?
특정 파일에 대해 소유권 없이 ReadWrite 권한을 갖게 되는 API Secuence 를 찾아라
API model 을 수학적 모델을 만듬 (precondition, postcondition) 에 대해
어떤 policy 가 나오는 특정 sequence 를 찾음 : Bounded model checking
=> FSB 자동화에 사용가능

FSB 를 찾았다는 가정하에 exploitablility 를 판단하고 실제 counter example 을 생성
format 에 존재하는 하나하나의 바이트가 토큰으로 작용하여,
이를 어떻게 배열해야 exploit 할 수 있지 않을까 : Bounded model checking
-> 이 공식을 만족하면 fsb 가 가능하다 -> 방정식의 해를 구함

but 주어진 모델 상에서만 동작
실제 shell 에서 실행하는 exploit 과는 거리가 있음
생성된 exploit 이 실제로 동작하지 않을 수 있음:
  실제 실행 경로 상에서 허용되지 않는 입력값이 존재할 수 있음

2008년 패치를 통한 익스플로잇 생성
1. 윈도우 업데이트가 80% 의 클라이언트에 설치되기까지는 최소 24시간이 걸림
2. 하지만 일반적으로 웜이 퍼지는 데에는 1시간 이내가 소요
=> 패치로부터 자동으로 몇 분 내에 익스플로잇을 만들 수 있다면 ?

Automatic Patch-based Exploit Generation (APEG)
sanitization check 를 통해 입력값을 검증 : 패치하는 경우가 대부분
-> 패치된 프로그램에서 sanitization 체크를 통과하지 못하는 입력값을 찾으면,
  원래 프로그램에서의 익스플로잇 가능성이 높음
  => Weakest precondition
입력값 검증에 대한 버그만 처리할 수 있음
+ crash 는 가능해서 exploit 과는 거리가 있음

2009년 Healen et al : 최초의 Control Flow Hijack 생성
주어진 프로그램 크래쉬에 대해서 정해진 알고리즘에 의해 exploit 을 자동 생성
문제점 : 특정한 조건의 (eip 가 handle 되거나 임의의 쓰기가 가능한)
  크래시에 대해서만 가능 => 가정이 거대

2011년 Avgerinos et al : 최초의 버그 검색, 익스플로잇 생성 자동화

Verification : Symbolic Execution
프로그램의 실행 경로를 체계적으로 탐색 -> 입력의 조건을 자동으로 검색 : Path Formula
Concrete Execution : 입력값이 주어졌을 때 경로를 탐색
Symbolic Execution : 입력값을 기호로 하여 경로를 탐색 - 어떤 값이든 가질 수 있음

경로식의 풀이
SMT (Satisfiability Modulo Theory) Solver : P = NP 를 활용
Symbolic Execution 을 통해 버그 탐색 -> 입력값 찾음 -> how to make exploitation

Symbolic Execution 을 통해 구한 path formula 는 수많은 집합을 나타내는 수식
좀더 specific 한 제약 조건들이 필요 -> AEG

Symbolic Execution : Path formula
+ Exploit additional formula : 익스에 필요한 추가 제약을 and 로 연결
-> exploit 을 구할 수 있다

2011년 소스코드가 주어졌다라고 가정
2012년 바이너리 기반 aeg 시도 (Mayhem)
2014년 AEG

Binary analysis ? no source code (only binary available)
소스코드와는 또다른 binary : AEG 에서 매우 중요한 부분

program abstraction : 소스코드에 있던 충분한 정보들이 모두 사라짐
변수 X, 함수 X
bug AEG 에서는 소스코드 보다 바이너리 분석이 더 쉽다
1. 소스는 상세한 메모리 구조를 알 수 없음
2. 소스코드가 같더라도 컴파일러마다 전혀 다른 바이너리 코드를 생성
3. Expoit 을 만드는데 메모리 구조는 이해가 필수적임

자동화된 바이너리 분석 : 역공학 -> 바이너리를 중간 언어로 나타냄
-> control flow graph : Data flow analysis, program verification, aeg
Mayhem : 최초의 바이너리 기반 AEG
BinaryCode : read -> middle language -> symbolic execution
-> Exploit generation (추가 제약 조건, 익스플로잇 생성)

알고 있었던 취약점에 대해 검증 : 대략 100초 정도 안에 익스플로잇을 성공
Mayhem 의 한계점 ? 모든 exploite 을 찾는 것이 아님 -> 놓치는 부분이 무조건 있음
: 시간이 무한대이지 않아 모든 부분을 검사하지 않음
하지만 모든 리포트는 진짜 exploit 임 crash 에서 끝나는 부분이 아님
complete 하지는 않지만 sound 함

AEG 측면에서 살펴보면, EIP 를 컨트롤 : 취약점 찾기에 합쳐야 할 부분이라 생각함
eip 를 컨트롤할 수 있는 실행 경로를 찾는 것이 중요

자동화된 바이너리 분석의 발전 : program abstraction 복원 기술이 필요
