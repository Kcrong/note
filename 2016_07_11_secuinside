IoTcube - 코드 클론에 의한 취약점 발생

패치의 올드 코드를 찾아서 뉴 코드를 래코맨드를 하기 때문에, 취약점 처리가 간단할 것
취약 코드 클론 탐지 -> 취약점 자동 검증 엔진 기술
-> 취약 코드 클론 탐지 -> 유사 취약 코드 탐지

네트워크 프로토콜 취약점 자동 분석 -> 원격에서 다른 디바이스를 테스팅 한다 ?
인터넷 제어 : SSL(SLS?) TLS -> 취약점이 없는 상태로 프로그램이 구동될까 ?
SSL/TLS 공격 모델을 나눔 (17개) 를 모두 자동화하여 분석
  -> 현재는 17개 중에 부분을 구현
실제로 많은 웹들이 SSL/TLS 를 사용하지만, POODLE, DROWN 취약점이 많이 존재
  -> MITM 과 같은 공격을 통해 SSL/TLS 우회가 가능

자동분석 플랫폼 개발 및 검증
취약점 분석 도구 플랫폼 사용자 인터페이스 디자인 및 인터액션 모델 설계
-> 잠재 사용자의 사용자 분석 결과 및 HO 의 인터페이스 디자인 이론에 입각

IoTcube : White box testing - hasher 프로그램을 수행, 프로그램의 해쉬값을 구함
=> 30여만개의 함수를 해쉬화하여 모음 -> hash 값을 모아 올리면 플랫폼이 분석해줌
=> CVE 코드들과 오픈소스 repository 와 모아 패치가 되지 않은 취약점들을 보여줌
+ CVSS 취약 심각도를 표현하여 패치의 우선순위를 보여줌
+소스트리를 펼쳐놓고, 어느 부분에서 발생한지를 보여줌
-> 어느 파일에서 어떤게 존재하는지 보여줌

Black Box Testing : fuzzing 파일을 받아 해당 파일을 퍼징할 수 있음
-> ex) bluetooth 로 장치 탐지, fuzzing 하여 퍼징 정보를 IoTcube 에 올리면
결과를 표현함

Network Testing : 프로그램을 다운로드 하여 목표로 하는 시스템을 정해주면
SSl/TLS 취약점을 점검하여 보여줌



Reverse Engineering DUBNIUM - MS Marware Protection Center : dubnium ?
어떤 광물질, apt 그룹을 추적 : 광물질 주기율표 이름을 붙임
어떠한 의미를 주는것이 좋아 보이지 않음
MS 과 왜 apt 그룹을 쫓는가 : 1. community marware : 일반적인 바ㅣ러스
  2. apt marware (advanced persistent threat) : 굉장한 의도를 가지고
    정보 기관, 군사 시설, 군수 기업 등을 타겟으로 한 멀웨어를 특수 제작, 침투함

C2 : 동아시아를 타겟팅함, CNC 서버로써 방콕, 이스트 아시아 쪽을 목표
Infection Method : Adobe flash 0 day 를 통해 유포됨, 샘플을 비밀리에 전달됨
  이 activity group 자체가 스피어 피싱을 통한 공격
  flash 0day - 3만불, 5만불, 6만불까지 나갈정도
Infection chain : 익스를 얻었다고 해서 실제 사용할 멀웨어를 얻을 수 있지는 않음
본인들이 지정한 타겟을 감염시키는 것이 목적이기 때문에, 감염도 자체가 높지 않음

가장 인펙션이 많은 나라 : 중국, 일본, 대한민국, 미국, 러시아 ... 북한 ...
  반한 영어, 반은 한국어 대상을 공격 -> 공격 스케일이 굉장히 작고 조심스러움

  stage0 : lnk 파일 사용 워드 파일처럼 쓰이지만, 링크 파일임, lnk 파일에 들어간 명령어를 실행
  파일 드롭및 실행, 가짜 워드 다큐먼트를 보여줌 (다큐먼트를 예상하고 있던 사람)
    -> DUPNIUM 이 누구를 대상으로 하는지 돜을 통해 알 수 있음
    -> Low level 스피어 피싱 외에도 플래시 익스플로잇을 즐겨 사용함
    ex) flash Exploit CVE-2015-8651 : 하이레벨 스크립트로 바이트 코드 생성,
            JIT 코드로 인터프리션, 최적화에서 문제점 발견
            AVM virtual machine 인스트럭션이 실제로 flash player 에서 실행될때는
            새로운 바이트로 컴파일
            -> optimization 과정에서 out of bound access 가 가능해짐
            -> 100% exploit 이 가능해짐
            7개월간 가장 즐겨쓴 공격 타깃
        spray 로 100개 200개를 깔아놓고, 코럽션이 일어난 부분을 찾아야함
        프로그램의 함수들이 모두 랜덤 스트링으로 바꿔 re 가 힘들어짐
        utility 함수들이 다수 존재, document 적, 굉장히 체계화된 exploit
    -> 외부 셀러를 통해 판매 ? 할것으로 예상

    action script 를 가져와서 customized 된 exploit 을 생성하기 쉬워보임
    깔끔하고, exploit 성공률이 굉장히 높으며 documentation 이 잘되있음
    -> 굉자잏 가격이 높았을 것
    param 을통해 쉽게 쉽게 갈아치우는게 가능함
    vector mirigation vs exploit


이기는 싸움을 위한 사이버 위협 분석 및 정보 공유 방안
  최근 사이버 보안 위협
    1. 올초, 제2의 3.20 재현 우려, 금융권 보안 솔루션 공급사 디지털 서명 해킹
      언론보도를 보면 북한 소행임 : 누구 소행
      더 중요한 얘기 : 왜 그런 일인지, 어떻게 발생하였는지
      => 노출된 웹서버(1차) -> 사내 가발자 PC(2차) => 정보 유출방지 인증 솔루션 취약점 (3차)

    2. 대기업 내부망 해킹 : 방산관련 자료 유출
      (1차)거래처 등 사칭 이메일을 통해 침투 -> pC 자산관리 제품의 인증 취약점

    내부 PC 악성코드를 유포 후 중앙관리 S/W 의 취약점을 악용하여 기업 전체 시스템 감염

    외부로 부터 사고 인지(53%), 내부에서 발견하는 경우 2달, 외부에서 발견되면 1년이 걸림

    개발자나 관리자가 해킹 당하면 네트워크 구성도, 네트워크 주소, iD, PWD, 내부 업무자료,
      기밀자료들이 노출됨

  위험하고 어려운 상황을 타개하는 방법 ?
    1. 어디서 대응할 것인가 : 손자병법 - 지형을 이용하면 열세한 병력으로도 적을 대파할 수 있다
      -> 네트워크의 주요 길목에서 대기하는 것이 좋음
      서비스를 하는 서버의 경유 아웃바운드는 거의 일어나지 않음 -> outbound 를 이용한 쉬운 탐지
    2. 어떤 데이터를 볼 것인가
      -> outbound 분석 체계 : 침해 사고 탐지 및 대응 -> 치해사고 분석 및 대응 컨셉
      : Cyber Kill Chain, Control, Execute, Maintain 은 outbound 트래픽임을 이용
    3. 무엇을 통해 볼 것인가
      -> 도구 : bro network forensic 자동화 오픈소스 도구
        : Log Files, Alert, Custom Logic
        :: Alert - SSH Bruteforcing, SQL Injection, 과 같은 상황을 탐지
        :: Custom Logic - opensource 임을 이용, 추가 프로그래밍을 통한 자료 제작
    4. 무엇을 해야할까

  생산과 공유 방안 : 전략적 분석만으로 충분한가 ?
    보통 사고가 발생하면, 관리자들은 1. 당황하거나, 2. 궁금해함
    당황하고, 사건을 묻어버리는 경우 다시 재발할 수 있음

    공격방식, 공격도구 , 공격 IP, 설정, 유포지 및 경유지, 명령제어 리소스, 악성 코드
    -> 유사한 형태를 구조화 : 그룹화하여 몇가지 특징들을 가지고 추후의 사고에 대응을 할 수 있음

    위험 정보 공유 : 피해업체, 의뢰업체 - 어떤점을 조심해야 할지, 어디를 집중관찰해야할지,
      어떤걸 점검해야 할지 고지하여 보안을 더 쉽고 안전하게 함

    제일 중요한 것은 생산, 공유는 오픈소스든 머든 굉장히 많기 떄문에


무선통신
  RF Radio Frequency 무선 통신
  두 장치를 Physical layer 을 연결하는 매체가 유선이냐 RF 로 구분
  Analog 신호를 표본화, 양자화 거쳐 bit 로 만들어 전송
  장점 -> 통신 반경이 넓어진다 ex) 리모콘

  주파수 ? Carrier Frequency
  신호를 생성할 떄는 모두 0 Hz(BaseBand)
  -> 특정 주파수로 옮겨 전송

  SDR Software defined Radio : ex) HackRF
  내부 코딩만을 이용하여 여러 기기를 구현할 수 있음
  RFID 125khz 장비 같은 경우는 HackRF 로 잡을 수 없음
  (본 디바이스가 지원하는 주파수 대역을 맞춰서 사용해야 함 : HackRF 10MHz ~ 6GHz)

  GNU Radio : 시각적 블록 다이어그램 설계, 설계를 바탕으로 Python 코드 생성, 디바이스에서 실행
  ex) FM Radio Receiver

  수식을 통해 비트를 뺴내면 본인의 주파수에 맡는 데이터를 가져올 수 있음

  FM Radio Jammer : noise 로 주파수를 덮어버림

  RKE replay (Remote Keyless Entry) 주파수를 이용한 자동차 키
  1. signal detection 를 통해 신호 관찰, 시각화
  2. signal save 를 통해 신호를 저장, replay 를 통해 신호를 재전송
  3. 몇번 진행하면 신호가 거부됨

  frequency 200 샘플마다 비트를 하나씩 뽑아내면, 송신자가 의도한 소스를 얻게 됨 (1)

  1. 시작점을 찾음
  2. 100으로 나눈 몫마다 비트를 추출해 저장,
  3. rolling code : 동일한 신호가 하나도 없음,
  분석값 : preamble = 97
  id = 14 (자동차 아이디)
  action bit 2 (열고 닫음)
  rolling code 44 - 지속적으로 바뀜 : 브루트포싱
  end bit 17
  총 4번 반복
  4. 수식구현하여 데이터 추출

  수신함수의 역함수가 송신함수
  신호 수신 방법은 알면 생성도 가능
  생성 방법은 수식의 코드 전환 수준
  대부분의 소형 장비의 신호는 매우 단순

OAuth 2.0
  Authorization request -> resource owner : Sent code -> Authorization Grant
  Client Secret + ResourceOwner Code -> provide : Sent access token
  api request : api response

  => 인가 시스템이 굉장히 복잡함
